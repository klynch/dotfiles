#! /usr/bin/env zsh

function launch() {
    eval "$@" &> /dev/null &!
}

function fixperms () {
  sudo chmod -R ugo+rX $1

  #find all symlinks and chmod them
  sudo find $1 -type l -exec chmod -h ugo+rX \{\} \;
}


###########################################################
# CFLAGS
###########################################################

function print_cflags() {
		echo "\$CFLAGS = ${CFLAGS}\n\$CXXFLAGS = ${CXXFLAGS}"
}

function set_cflags() {
    export CC=gcc
    export CXX=g++
    #export CPPFLAGS =
    export CFLAGS	 = "-Wall -pedantic -std=c99 -g"
    export CXXFLAGS ="-Wall -pedantic -g"
    #export DEFS     =
    #export LDFLAGS  =
    #export LIBS     =
    #export CFLAGS=
}


###########################################################
# ARCHIVE
###########################################################

function extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)    tar xjf $1       ;;
			*.tbz2)       tar xjf $1       ;;
			*.tar.gz)     tar xzf $1       ;;
			*.tgz)        tar xzf $1       ;;
			*.bz2)        bunzip2 $1       ;;
			*.rar)        unrar e -ad $1   ;;
			*.gz)         gunzip $1        ;;
			*.zip)        unzip $1         ;;
			*.jar)        unzip $1         ;;
			*.tar)        tar xf $1        ;;
			*.Z)          uncompress $1    ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function list () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)    tar tjf $1       ;;
			*.tbz2)       tar tjf $1       ;;
			*.tar.gz)     tar tzf $1       ;;
			*.tgz)        tar tzf $1       ;;
			*.bz2)        echo "NO"        ;;
			*.rar)        echo "NO"        ;;
			*.gz)         echo "NO"        ;;
			*.zip)        echo "NO"        ;;
			*.jar)        echo "NO"        ;;
			*.tar)        tar tf $1        ;;
			*.Z)          echo "NO"        ;;
			*) echo "'$1' cannot be listed via list()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


###########################################################
# BACKUP FILES
###########################################################

function restore_bak () {
	  autoload -U zmv
	  zmv '(**/)(*).bak' '$1$2'
}

function bu () {
    cp $1 `basename $1`-`date +%Y%m%d%H%M`.backup ;
}


###########################################################
# MOUNT FILES
###########################################################

# TODO mount *.dmg, *.iso, FUSE, Dropbox
#call it fmount? fumount?
function mount_file () {
    if [ -f $1 ] ; then
        case $1 in
            *.dmg)    hdiutil attach $1    ;; #OSX only
            *.iso)    hdiutil attach $1    ;; #OSX only
        esac
    fi
}

function umount_file () {
    if [ -f $1 ] ; then
        case $1 in
            #TODO
        esac
    fi
}


###########################################################
# DIFF FILES
###########################################################

#TODO add an exclude-file somewhere in ~/.zsh.d/

function diff-dir () {
	if (($# != 2)); then echo "usage: $0 DIR1 DIR2"; return -1; fi
	if ! [[ -d $1 ]]; then echo "error: $1 is not a directory"; return -1; fi
	if ! [[ -d $2 ]]; then echo "error: $2 is not a directory"; return -1; fi
	
	diff -qr --exclude='.DS_Store' --exclude='.git' $1 $2
}

###########################################################
# PROCESSES
###########################################################

function psg () {
    ps aux | grep $1
}

function ps-sort() {
	ps aux${1} | head -n $((${2:-5}+1)) | cut -c 1-$(tput cols)
}

function cpu() {
	ps-sort r ${1}
}

function mem() {
	ps-sort m ${1}
}
